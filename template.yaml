Transform: AWS::Serverless-2016-10-31
Globals:
  Function:
    MemorySize: 3008
    Timeout: 30
    Runtime: python3.11
    Tracing: Active
    Architectures:
      - arm64
Parameters:
  WebhookSiteURL:
    Type: String
    Default: 'https://webhook.site/YOURSITEHERE'
Resources:
  EventBridgeToToSnsPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sns:Publish
            Resource: !Ref UsersSNSTopic
      Topics:
        - !Ref UsersSNSTopic
  MarketplaceCustomEventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: marketplace
  MarketplaceAPI:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub
        - ${ResourceName} From Stack ${AWS::StackName}
        - ResourceName: MarketplaceAPI
      StageName: Prod
      Auth:
        ApiKeyRequired: true 
      DefinitionBody:
        openapi: '3.0'
        info: {}
        paths:
          /request/{id}:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetRequestsFunction.Arn}/invocations
              responses: {}
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateRequestsFunction.Arn}/invocations
              responses: {}
      EndpointConfiguration: REGIONAL
      TracingEnabled: true
  ApiKey:
    Type: AWS::ApiGateway::ApiKey
    Properties: 
      Enabled: True
  UsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties: 
      ApiStages: 
        - ApiId: !Ref MarketplaceAPI
          Stage: Prod
  UsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !Ref ApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref UsagePlan
  GetRequestsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: GetRequestsFunction
      CodeUri: src/GetRequestsFunction
      Handler: handler.handler
      Environment:
        Variables:
          TABLE_NAME: !Ref requests
          TABLE_ARN: !GetAtt requests.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref requests
      Events:
        MarketplaceAPIGETrequestid:
          Type: Api
          Properties:
            Path: /request/{id}
            Method: GET
            RestApiId: !Ref MarketplaceAPI
            Auth:
              ApiKeyRequired: true
  GetRequestsFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${GetRequestsFunction}
  UpdateRequestsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: UpdateRequestsFunction
      CodeUri: src/UpdateRequestsFunction
      Handler: handler.handler
      Environment:
        Variables:
          TABLE_NAME: !Ref requests
          TABLE_ARN: !GetAtt requests.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref requests
        - Statement:
            - Effect: Allow
              Action:
                - events:PutEvents
              Resource:
                - !GetAtt MarketplaceCustomEventBus.Arn
      Events:
        MarketplaceAPIPOSTrequestid:
          Type: Api
          Properties:
            Path: /request/{id}
            Method: POST
            RestApiId: !Ref MarketplaceAPI
  UpdateRequestsFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${UpdateRequestsFunction}
  requests:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
  Update3rdPartyFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: Update3rdPartyFunction
      CodeUri: src/Update3rdPartyFunction
      Handler: handler.handler
      Environment:
        Variables:
          TABLE_NAME: !Ref requests
          TABLE_ARN: !GetAtt requests.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref requests
  Update3rdPartyFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${Update3rdPartyFunction}
  Update3rdpartyToUpdate3rdPartyFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt Update3rdPartyFunction.Arn
      Principal: !Sub events.${AWS::URLSuffix}
      SourceArn: !GetAtt Update3rdPartyFunction.Arn
  ThirdrdPartyAPI:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: ThirdrdPartyAPI
      CodeUri: src/3rdPartyAPI
      Handler: handler.handler
      Environment:
        Variables:
          TABLE_NAME: !Ref requests
          TABLE_ARN: !GetAtt requests.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref requests
  ThirdrdPartyAPILogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${ThirdrdPartyAPI}
  ToThirdrdPartyAPI3rdparty2To3rdpartyAPIPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt ThirdrdPartyAPI.Arn
      Principal: !Sub events.${AWS::URLSuffix}
      SourceArn: !GetAtt To3rdParty2API.Arn
  ToThirdrdPartyAPI3rdparty1To3rdpartyAPIPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt ThirdrdPartyAPI.Arn
      Principal: !Sub events.${AWS::URLSuffix}
      SourceArn: !GetAtt To3rdParty1API.Arn
  UsersSNSTopic:
    Type: AWS::SNS::Topic
  WebhookSiteConnection:
    Type: AWS::Events::Connection
    Properties:
      AuthorizationType: API_KEY
      Description: 'WebhookSite connection with an API key'
      AuthParameters:
        ApiKeyAuthParameters:
          ApiKeyName: apikey
          ApiKeyValue: apivalue
  WebhookSiteDestination:
    Type: AWS::Events::ApiDestination
    Properties:
      Name: 'WebhookSite'
      ConnectionArn: !GetAtt WebhookSiteConnection.Arn
      InvocationEndpoint: !Ref WebhookSiteURL
      HttpMethod: POST
      InvocationRateLimitPerSecond: 10
  EventBridgeTargetRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action:
              - sts:AssumeRole      
      Policies:
        - PolicyName: AllowAPIdestinationAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 'events:InvokeApiDestination'
                Resource: !GetAtt WebhookSiteDestination.Arn
  To3rdParty1API:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        detail:
          3rdparty:
            - 3rdParty1
      EventBusName: marketplace
      Targets:
        - Id: !Ref ThirdrdPartyAPI
          Arn: !GetAtt ThirdrdPartyAPI.Arn
        - Arn: !GetAtt WebhookSiteDestination.Arn
          RoleArn: !GetAtt EventBridgeTargetRole.Arn
          Id: "WebhookSiteDestination"
  To3rdParty2API:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        detail:
          3rdparty:
            - 3rdParty2
      EventBusName: marketplace
      Targets:
        - Id: !Ref ThirdrdPartyAPI
          Arn: !GetAtt ThirdrdPartyAPI.Arn 
        - Arn: !GetAtt WebhookSiteDestination.Arn
          RoleArn: !GetAtt EventBridgeTargetRole.Arn
          Id: "WebhookSiteDestination"
  ThirdPartytoMarketplaceSNS:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        Source:
          - com.marketplace.3rdparty1
        DetailType:
          - marketplace status update
        detail:
          3rdparty:
            - 3rdparty1
      Targets:
        - Id: UsersSNSTopic
          Arn: !Ref UsersSNSTopic
      EventBusName: marketplace
  Update3rdParty:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source:
          - aws.health
      Targets:
        - Id: !Ref Update3rdPartyFunction
          Arn: !GetAtt Update3rdPartyFunction.Arn
      EventBusName: marketplace
Outputs:
    # API Gateway endpoint to be used during tests
    AppApiEndpoint:
      Description: API Endpoint
      Value: !Sub "https://${AppApi}.execute-api.${AWS::Region}.amazonaws.com/Prod"  
Metadata:
  AWS::Composer::Groups:
    Group:
      Label: EventBridge
      Members:
        - MarketplaceCustomEventBus
        - Update3rdParty
        - ThirdPartytoMarketplaceSNS
        - To3rdParty2API
        - To3rdParty1API
    Group3:
      Label: EventGateway
      Members:
        - MarketplaceAPI
        - GetRequestsFunction
        - UpdateRequestsFunction
        - requests
    Group4:
      Label: SNS
      Members:
        - EventBridgeToToSnsPolicy
        - UsersSNSTopic
    Group2:
      Label: 3rdParty
      Members:
        - Update3rdpartyToUpdate3rdPartyFunctionPermission
        - Update3rdPartyFunction
        - ThirdrdPartyAPI     